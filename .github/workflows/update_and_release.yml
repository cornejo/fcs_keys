name: Update Keys and Create Release

on:
  schedule:
    - cron: "42 * * * *"
  workflow_dispatch:

concurrency:
  group: release-updater
  cancel-in-progress: true

jobs:
  update-keys-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: blacktop/ipsw
      options: --workdir /github/workspace -v ${{ github.workspace }}:/github/workspace
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl git jq python3 python3-pip python3-requests

      - name: Get new keys and commit
        working-directory: /github/workspace
        run: |
          ipsw version
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          cd `basename ${GITHUB_REPOSITORY}`
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          ./update.py
          git add keys
          git add fcs-keys.json
          git add iOS_key_log.json
          git add iPadOS_key_log.json
          git add macOS_key_log.json
          if git commit -m "Automatic update"; then
            echo COMMIT_STATUS=success >> $GITHUB_ENV
            git push origin HEAD:main
          else
            echo COMMIT_STATUS=failure >> $GITHUB_ENV
            echo "No changes to commit"
          fi
          # Delete empty directories
          rmdir keys/*/* 2>/dev/null || true
          tar cjf ../keys.tbz2 keys
          cp fcs-keys.json ..

      - name: Check previous release was ok
        run: |
          num=`curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases" | jq length`
          echo "Num releases: ${num}"
          if [ "$num" != "1" ] ; then
            echo "Forcing release"
            echo COMMIT_STATUS=success >> $GITHUB_ENV
          fi

      - name: Delete old release (manual)
        if: env.COMMIT_STATUS == 'success'
        run: |
          set -e
          release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/v1.0.0 | jq -r .id)

          if [ "$release_id" != "null" ]; then
            echo "Deleting existing release ID: $release_id"
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/$release_id
          fi

          # Delete the tag if it exists
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/git/refs/tags/v1.0.0 || true


      - name: Make releases
        uses: ncipollo/release-action@v1
        if: env.COMMIT_STATUS == 'success'
        with:
          tag: v1.0.0
          name: Current Release
          commit: main
          artifacts: |
            keys.tbz2
            fcs-keys.json
          draft: false
          prerelease: false
